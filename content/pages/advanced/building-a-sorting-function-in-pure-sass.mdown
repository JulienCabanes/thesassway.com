Date: 24 January 6
Categories: advanced, hugo-giraudel
Author: Hugo Giraudel
Summary: Hugo takes another page from his SassyLists playbook and teaches us how to build a string sorting function in pure Sass.

# Building a sorting function in pure Sass

The current version of my [SassyLists](http://sassylists.com) library includes a sorting function that allows you to sort a list of numbers (recently updated to use the quicksort algorithm thanks to [Snugug](http://twitter.com/snugug). Unfortunately, Sass doesn't provide the features necessary to build a function that will sort a list of strings in pure Sass.

Until now. Or I should say, shortly. 

[Along with a slew of other features](http://davidwalsh.name/future-sass), Sass 3.3 will add the features needed to do just this. And today, I'd like to show you how this will work with Sass 3.3.


## Comparing strings

The heart of any sorting function is the ability to compare two strings and determine which one should go before the other. Most programming languages make this fairly easy, but to do this in Sass we have to build our own string comparison function.

For starters, we need to teach Sass the correct order to sort strings in based on the characters each string contains.

I'm going to define this with a variable:

    :::scss
    // Declare the default sort order. Use Sass's !default flag so this
    // value doesn't override the variable if it was already declared.
    $default-sort-order: a b c d e f g h i j k l m n o p q r s t u v w x y z !default;

This can be used to declare that strings that begin with `a` should appear before strings that begin with `b` or `c` and so on. In real life you'd probably want to include other characters in your sort order string (like numbers, characters with accents, and other symbols), but `a-z` works for our example.

Now for the meat of our comparison function:

    :::scss
    @function str-compare($a, $b, $order: $default-sort-order) {
      $a: to-lower-case($a + unquote(""));
      $b: to-lower-case($b + unquote(""));      

      // Loop through and compare the characters of each string...
      @for $i from 1 through min(str-length($a), str-length($b)) {

        // Extract a character from each string
        $char-a: str-slice($a, $i, $i);
        $char-b: str-slice($b, $i, $i);

        // Get the index of each character from the $order list
        $index-a: index($order, $char-a);
        $index-b: index($order, $char-b);
        
        // If characters exist in $order list and are different
        // return true if first comes before second
        @if comparable($$char-a, $char-b) and index($order, $char-a) != index($order, $char-b) {
          @return index($order, $char-a) < index($order, $char-b);
        }
      }
      
      // In case they are equal after all characters in one string are compared,
      // return the shortest first
      @return str-length($a) < str-length($b);
    }
   
What's going on here? We are basically looping through the characters in each string (`$a` and `$b`) and looking up location of each in the `$order` list with the Sass `index()` function. This gives us two numbers that can be compared to see which character goes before the other. If the numbers are the same we loop around to the next set of characters, but if they are different we've found which one goes first.

The `str-compare()` function returns `true` if variable `$a` goes before variable `$b` and `false` if it does not.


## Swapping two values

Just for the sake of it, I recently tried to [implement famous sorting algorithms in pure Sass](http://sassmeister.com/gist/8239322). I succeeded in implementing `bubbleSort`, `shellSort`, `quickSort` (thanks to Snugug) and `selectionSort`. Since `bubbleSort` is probably the easiest to use, this is the one we'll use for our sorting function.

Basically, bubble sorting relies on swapping two values in the array after comparing them. So all we need is a function swapping value at index `$a` and value at index `$b` in the given list.

    :::scss
    @function swap($list, $a, $b) {
      @if abs($a) > length($list) or abs($b) > length($list) {
        @return $list;
      }
      $tmp: nth($list, $a);
      $list: set-nth($list, $a, nth($list, $b));
      $list: set-nth($list, $b, $tmp);
      @return $list;
    }

The above is fairly self explanatory. To avoid cycling through the list to make another one with new values, we take advantage of the brand new `set-nth` function which simply edit the list instead of building a fresh one.

## The string sorting function

Armed with `str-compare()` and `swap()` we now have everything we need to build a proper string sorting function:

    :::sass
    @function sort($list, $order: $default-sort-order) {
      @for $i from 1 through length($list) {
        @for $j from $i * -1 through -1 {
          $j: abs($j);
          @if $j > 1 and str-compare(nth($list, $j), nth($list, $j - 1)) {
            $list: swap($list, $j, $j - 1);
          }
        }
      }
      @return $list;
    }


Now let's test it:

    :::scss
    $list: oranges pears apples strawberries bananas;
    $sort: sort($list);
    // => apples bananas oranges pears strawberries

Hurray! It works like a charm.


## SassyLists

The latest version of [SassyLists](http://sassylists.com/) includes slightly more robust versions of these and nearly 30 other functions that can make working with lists in Sass so much easier. However, it won't be released until Sass 3.3 is available.

While waiting for 3.3, you can still use the current version of SassyLists (in 0.4.3 as of writing) either by sneaking into the [GitHub repository](https://github.com/Team-Sass/SassyLists) or by installing it as a Compass Extension:

1. `gem install SassyLists`
2. Add `require 'SassyLists'` to your `config.rb`
3. Import it in your stylesheets with `@import 'SassyLists'`

Hope you like it! If you think of anything to improve it, be sure to share.
